:m +  Data.List

:m +  Data.Maybe

:m + Sound.Tidal.Utils


let rolled = withEvents aux
             where aux es = concatMap (steppityIn) (groupBy (\a b -> whole a == whole b) $ sortOn whole es)
                   steppityIn xs = mapMaybe (\(n, x) -> shiftIt n (length xs) x) $ enumerate xs
                   shiftIt n d (Event c (Just (Arc s e)) a' v) = do
                             a'' <- subArc (Arc newS e) a'
                             return (Event c (Just $ Arc newS e) a'' v)
                          where newS = s + (dur * fromIntegral n)
                                dur = (e - s) / (4*fromIntegral d)


let pats =
      [
        ("a", stack [whenmod 4 1 (plyWith 2 (0.125 <~).(# legato "0.5 0.75 1 1.5 1.75 2.5")) $
          off 0.25 (# octave 3) . (rev) . (# legato 2.5) $
          struct "t(9,12,2)" $
          n (arp "<diverge>" "<f'm7s5'12 af'm11'12 fs'maj9'12 bf'm7s5'12>") #
          tabby 3 (dek 2 1 4)
          (dek 3 1 "4 5 3 4")
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*24"
        , rakk "~ 3"
        ]
        ),
        ("b", stack [
          chop 12 $
          n "{af'five df'five fs'five}" #
          dek 2 1 4
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*24"
        , rakk "~ 3"
        ]
        ),
        ("c", whenmod 4 1 (zoom (0.5, 1)) $ stack [
          n "{af'five df'five fs'five}%6" #
          dek 2 1 "4 5"
        , rot "<2 4 0>" $
          n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%6"
        , mask (binaryN 16 1010111011) $
          rakk "4*48"
        , rakk "3(3,8,<1 0>)"
        ]
        ),
        ("d", bite 3 "{0*2 1*2 2*2}%<1 2>" $ someCyclesBy 0.11 (ply 2) $ iter 4 $ zoom (0.25, 0.5) $ stack [whenmod 4 1 (plyWith 2 (0.125 <~).(# legato "0.5 0.75 1 1.5 1.75 2.5")) $
          off 0.25 (# octave 3) . (rev) . (# legato 2.5) $
          struct "t(9,12,2)" $
          n (arp "<diverge>" "<f'm7s5'12 af'm11'12 fs'maj9'12 bf'm7s5'12>") #
          tabby 3 (dek 2 1 "4 3 3 4 5")(dek 3 1 "4 5 3 4")
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*48"
        , rakk "3(3,8)"
        ]
        ),
        ("e", stack [
          bite 2 "{0 1 1*2}%<[4 1] 2>" $
          struct "t(9,12,<2 0>)" $
          fast "<0.5 1>" $
          rolled $
          n "<[df'sus2, c] [fs'maj9'iii, bf]>" #
          tabby 3 (dek 2 "[1 0.5] [1.25 0.25 2.5]" "<[4,3] [3]>")(dek 3 "[1 0.5] [1.25 0.25 2.5]" "<[4,3] [3]>")
        , struct "<t*12 t*8>" $
          n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , mask "t(<6 3>,<8 4>,<0 3>)" $
          rakk "4*24"
        , someCycles (ply 2) $
          rakk "{1 ~ 3}%<4 2>"
        ]
        ),
        ("f", stack [struct "t*16" $ rot "1 [2 3]" $ within (0.5, 0.75) (slow 2 . zoom (0.125, 0.25) . (linger "<0.25 0.5>")) $
          n (arp "up diverge" "{fs'maj9'6}%<12 6 12 8>") #
          dek 3 "1.5 2 0.5" "3 4"
        , n "<fs af bf>" #
          dek 5 1 2
        ]
        ),
        ("g", stack [
          off "<0.5 0.25 0.125>" (struct "<t*12 t*8 t*12 t*4>" . arp "down converge up" . (# legato 0.5)) $
          someCyclesBy 0.44 (mask (binaryN 16 101011010101)) $
          struct "t*6" $
          n "<[ef'm13] [fs'maj9]>" #
          dek 3 1 "4 3 5"
        , n "<fs af bf>" #
          dek 5 1 2
        ]
        )
      ]
in
d2 $ ur 63 "a b c d e f g" pats [] # cps (90/240)








d2 $ someCyclesBy 0.44 (slow 4 . plyWith 8 (|* amp 0.95)) $ stack [
  someCyclesBy 0.22 (struct "t*4" . (# n "fs'maj") . (# legato 2) . (# octave 5)) $ rot "<1 0>" $
  mask (binaryN 16 "<1010110110 1110111 674300234>") $
  n (arp "converge down" "<fs'maj7'8 [df'sus2'6 df'maj9'6]>") #
  dek 8 (range 1 6 $ rand) "5 4" #
  amp (range 0.5 1 $ rand)
, n "<f ef fs df>" # dek 5 1 2
] # cps (135/240)

hush



d2 $ n "c'five*4" # dek 8 1 "4 5"
