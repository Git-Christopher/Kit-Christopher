:m +  Data.List

:m +  Data.Maybe

:m + Sound.Tidal.Utils


let rolled = withEvents aux
             where aux es = concatMap (steppityIn) (groupBy (\a b -> whole a == whole b) $ sortOn whole es)
                   steppityIn xs = mapMaybe (\(n, x) -> shiftIt n (length xs) x) $ enumerate xs
                   shiftIt n d (Event c (Just (Arc s e)) a' v) = do
                             a'' <- subArc (Arc newS e) a'
                             return (Event c (Just $ Arc newS e) a'' v)
                          where newS = s + (dur * fromIntegral n)
                                dur = (e - s) / (4*fromIntegral d)








let pats =
      [
        ("a", stack [whenmod 4 1 (plyWith 2 (0.125 <~).(# legato "0.5 0.75 1 1.5 1.75 2.5")) $
          off 0.25 (# octave 3) . (rev) . (# legato 2.5) $
          struct "t(9,12,2)" $
          n (arp "<diverge>" "<f'm7s5'12 af'm11'12 fs'maj9'12 bf'm7s5'12>") #
          tabby 3 (dek 2 1 4)
          (dek 3 1 "4 5 3 4")
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*24"
        , rakk "~ 3"
        ]
        ),
        ("b", stack [
          chop 12 $
          n "{af'five df'five fs'five}" #
          dek 2 1 4
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*24"
        , rakk "~ 3"
        ]
        ),
        ("c", whenmod 4 1 (zoom (0.5, 1)) $ stack [
          n "{af'five df'five fs'five}%6" #
          dek "[2,4]" 1 "4 3"
        , rot "<2 4 0>" $
          n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%6"
        , mask (binaryN 16 1010111011) $
          rakk "4*48"
        , rakk "3(3,8,<1 0>)"
        ]
        ),
        ("d", bite 3 "{0*2 1*2 2*2}%<1 2>" $ someCyclesBy 0.11 (ply 2) $ iter 4 $ zoom (0.25, 0.5) $ stack [whenmod 4 1 (plyWith 2 (0.125 <~).(# legato "0.5 0.75 1 1.5 1.75 2.5")) $
          off 0.25 (# octave 3) . (rev) . (# legato 2.5) $
          struct "t(9,12,2)" $
          n (arp "<diverge>" "<f'm7s5'12 af'm11'12 fs'maj9'12 bf'm7s5'12>") #
          tabby 3 (dek 2 1 "4 3 3 4 5")(dek 3 1 "4 5 3 4")
        , n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , rakk "{1}%3"
        , rakk "4*48"
        , rakk "3(3,8)"
        ]
        ),
        ("e", stack [
          bite 2 "{0 1 1*2}%<[4 1] 2>" $
          struct "t(9,12,<2 0>)" $
          fast "<0.5 1>" $
          rolled $
          n "<[df'sus2, c] [fs'maj9'iii, bf]>" #
          tabby 3 (dek 2 "[1 0.5] [1.25 0.25 2.5]" "<[4,3] [3]>")(dek 3 "[1 0.5] [1.25 0.25 2.5]" "<[4,3] [3]>")
        , struct "<t*12 t*8>" $
          n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , mask "t(<6 3>,<8 4>,<0 3>)" $
          rakk "4*24"
        , someCycles (ply 2) $
          rakk "{1 ~ 3}%<4 2>"
        ]
        ),
        ("f", stack [
          whenmod 4 1 (plyWith 2 (0.125 <~).(# legato "0.5 0.75 1 1.5 1.75 2.5")) $
          off 0.25 (# octave 3) . (rev) . (# legato 2.5) $
          struct "t(9,12,2)" $
          n (arp "<diverge>" "<f'm7s5'12 af'm11'12 fs'maj9'12 bf'm7s5'12>") #
          dek 3 1 3
        , struct "<t*12 t*8>" $
          n "<[f ef] [af bf] [b fs] [df bf]>" #
          dek 5 1 2
        , bite 2 "{0 1 1*2}%<[4 1] 2>" $
          struct "t(9,12,<2 0>)" $
          fast "<0.5 1>" $
          rolled $
          n "<[df'sus2, c] [fs'maj9'iii, bf]>" #
          dek 2 "[1 0.5] [1.25 0.25 2.5]" "<[4,5] [4]>"
          ]
        )
      ]
in
d2 $ ur 54 "a b c d e f" pats [] # cps (90/240)







let pats =
      [
        ("a", stack [struct "t*16" $ rot "1 [2 3]" $ within (0.5, 0.75) (slow 2 . zoom (0.125, 0.25) . (linger "<0.25 0.5>")) $
          n (arp "up diverge" "{fs'maj9'6}%<12 6 12 8>") #
          dek 3 "1.5 2 0.5" "3 4"
        , struct (fill 7 8) $
          n "<fs af <bf ef>>" #
          dek 5 1 2 # amp (range 0.6 1 $ rand)
        ]
        ),
        ("b", stack [
          off "<0.5 0.25 0.125>" (struct "t*16?" . arp "down converge up" . (# dek 3 "2 6 0.75" 4) . (# amp 1)) $
          someCyclesBy 0.44 (mask (binaryN 16 101011010101)) $
          struct "t*4" $
          n "<[ef'm13] [fs'maj9]>" #
          dek 3 "1 2" "4 3 5"
        , struct (fill 6 8) $
          n "<fs af <bf ef>>" #
          dek 5 "1 1.5" 2
        ]
        ),
        ("c", someCyclesBy 0.44 (slow 2 . plyWith 4 (# legato 0.5)) $ stack [
          someCyclesBy 0.22 (struct "t*4" . (# n "fs'maj") . (# legato 2) . (# octave 5)) $ rot "<1 0>" $
          mask (binaryN 16 "<1010110110 1110111 674300234>") $
          n (arp "converge down" "<fs'maj7'8 [df'sus2'6 df'maj9'6]>") #
          dek "<3 2>" (range 1 6 $ rand) "5 4" #
          amp (range 0.5 1 $ rand)
        , struct "t*4" $
          slow "<1!3 4>" $
          n "<f ef fs df>" #
          dek 5 1 2
        , struct "t(1,8)" $
          rakk "[1,4]"
        ]
        )
      ]
in
d2 $ ur 32 "a b c c" pats [] # cps (90/240)

hush













d2 $ stack [
  struct "t*8" $ n "{fs@1.5 df*2@3 ~ df'sus2'ii@2}%<3 1 2>" # dek 8 1 "4 3" # amp 1
, every' 4 3 (ply 8) $ rakk "{1 ~ <3 5>}"
] # cps (90/240)

hush













d2 $ someCycles (iter "2 4") $ stack [
  slow 2 $
  degradeBy "<0.5 0.4 0.7>" $
  struct (binaryN 16 505000505055) $
  n "<fs!4 af!3 bf ef!4>" #
  dek 5 1 2
, someCyclesBy 0.44 (zoom (0.5,1)) $
  struct (binaryN 16 505000505055) $
  rakk "{4, ~ ~ <7 3>/4}%<6 4>"
, someCyclesBy 0.77 (# n "<fs'five!3 af'five>") $
  struct "t(<6 7>,8)?" $
  n "<fs'6by9 fs'6by9'ii>" #
  dek 2 1 "4 3 5 4"
] # cps (90/240)






let pats =
      [
        ("a", stack [
          degrade $
          struct "t*8?" $
          n "<[as]>" #
          dek 7 1 0
        , n "<af!2 bf df fs!2 ef df>" #
          dek 5 1 2
        , rakk "[1(3,8)?0.66, 2*<4? 8?>]"
        ]
        ),
        ("b", stack [
          degrade $
          struct "t*8?" $
          n "<[as]>" #
          dek 7 1 0
        , slow 4 $
          n "<[gs, ~ a*2]>" #
          dek 7 1 0
        , struct "t(3,8)" $
          n "<fs!2 af <df bf>>" #
          dek 5 1 2
        , rakk "[1(3,8), [4|7?0.2]*<4 8>]"
        , n "af'maj" #
          dek 4 1 3
        ]
        ),
        ("c", stack [
          slow 4 $ n "<gs c>" #
          dek 7 1 0
        , struct "t(3,8)" $
          n "<fs!2 af <df bf>>" #
          dek 5 1 2
        , degradeBy (range 0.11 0.55 $ slow 24 sine) $
          someCycles (off 0.25 (zoom (0.5,1))) $
          n (arp "down" "<df'maj9'16 df'sus2'16>") #
          dek "[2,3]" "4 1" 2
        , rakk "[1(3,8), 4*16?]"
        , n "<af'maj fs'sus2 bf'm9 fs'sus2>" #
          dek 4 1 3
        ]
        )
      ]
in
d2 $ ur 64 "a b c c" pats [] # cps (90/240)





hush

d2 $ stack [
  whenmod 12 1 (degradeBy 0.33) $
  clip "{1 {<2 3 10 12>}*3}%<8 4>"
, whenmod 4 1 (# legato 0.5) $
  someCyclesBy 0.44 (struct "t(3,8)") $
  n "<af'sus4'o!3 fs'sus2'o>" # dek 2 1 4
, struct "t*8" $
  n "<af df fs ef>" #
  dek 5 1 "2 3 2"
] # cps (90/240)






d2 $ stack [
  struct ("t(<5 7>,8,<0 3>)") $
  rakk "{1 ~ [1 2] 4, 3 2 [<7 8>]}%<16>"
, struct "t*8" $
  n "<af df fs ef>" # dek 5 1 "2 3 2"
, whenmod 4 1 (# legato 0.5) $
  someCyclesBy 0.44 (struct "t(3,8)") $
  n "<df'maj!3 fs'sus2'o>" #
  dek 2 1 4
, degradeBy 0 $
  whenmod 4 1 (slow 2 . press) $
  struct "<t*32>" $
  cat [clip "{10 15 11 7 8 12 6 7}%<8>", clip "{2 3 4 5 6 10 11 1}%<8>"]
] # cps (90/240)








d2 $ stack [
  while "<f>" (mute) $ whenmod 11 5 (iter 2) $ cat [clip "{1 12 3 16 5 11}%<16 8>", clip "{1}%<16 8>", clip "{1 11}%<16 8>"]
, whenmod 4 1 (# legato 0.5) $
  someCyclesBy 0.44 (struct "t(3,8)") $
  n "<af'add9'o!3 fs'sus2'o>" # dek 2 1 3
, struct "t*16?" $
  rakk "[<1 [3,7]>,4]"
, struct "t*8" $
  n "<af df fs ef>" #
  dek 5 1 "2 3 2"
] # cps (90/240)




hush












d2 $ stack [
  struct "t*2 t*8" $
  n "<bf'm11!4 df'maj9!3 af'six>" #
  dek 2 "[1 0.75] [0.5!4 0.25!4]" "<4!4 4!2 5 4>"
, while "<f!2 f!2>" (mute) $
  struct "t*2 f" $
  n "<df!4 af!4 bf fs f!2>" #
  dek 5 1 2
, while "<t!2 f!2>" (mute) $
  struct "t*2 t*8" $
  rakk "1"
] # cps (160/240)

hush




--ur template
let pats =
      [
        ("a", stack [
          chop "{2 0 0 2}%3" $ stack [n "{bf'm11'o bf'm9'o}%6", ccv "{0 127 0 64}%8" # ccn 16] # dek 2 1 "{3 4 4 3}%4"
        , struct "{t t t t}%3" $ stack [n "<bf!12 df!12>"] # dek 5 1 2
        , struct "{t t t t}%3" $ rakk "{1 4 1 1 4}%6"
        , rakk "~ 3/4"
        ]
        ),
        ("b", stack [
          chop "{2 0 0 2}%3" $ stack [n "{bf'm11'o bf'm9'o}%6"] # dek 4 1 "[3, 4]"
        , rot "<1!5 0>" $ struct "{t t t t}%12" $ stack [midibend "{8192 0 16383 -8192 0}%3", n (arp "downup" "df'add9'12")] # dek 3 0.5 "3 4"
        , struct "{t t t t}%3" $ stack [n "<bf!12 df!12>"] # dek 5 1 2
        , struct "{t t t t}%3" $ rakk "{1 4 1 1 4}%6"
        , rakk "~ 3/4"
        ]
        ),
        ("c", stack [
          struct "{t t t t}%3" $ stack [n "<bf!12 df!12>"] # dek 5 1 2
        , struct "{t t t t}%3" $ rakk "{1 4 1 1 4}%6"
        , rakk "~ 3/4"
        ]
        )
      ]
in
d2 $ ur 48 "a b c" pats [] # cps (160/240)

hush





let sync = "[t*8 t*6]"
    sync' = "t(6,{8 12}%6,{3 0}%4)"
    pats =
      [
        ("a", stack [
        off 0.5 (slow 4 . struct "t*16" . arp "<up converge updown>" . (# dek "{3}" 3 "4 3")) $
        struct (sync) $
        n "<bf'm11'iii df'sus2'ii>" #
        dek "{2 4 4 2}%3" 1 "3 4 3"
      , struct (sync) $
        n "<df ef f af fs!2 f!2>" #
        dek 5 "1 0.7" "<3 3 2 2 3!4>"
      , struct (sync) $
        rakk "{1 4/2 3/4}%6"
        ]
        ),
        ("b", whenmod 11 4 (slow "<2 1>" . iter 2) $ foldEvery [4,5] (slow 2 . chunk 2 (bite 4 "<[0*2 2*4] [1*2 <3 1>*3]>")) $ stack [
        off 0.5 (slow 4 . struct "t*16?" . arp "<pinkydown>" . (# dek "{3 2}%3" 1 "4 3")) $
        struct (sync) $
        n "<bf'm11'iii df'maj9'ii>" #
        dek 2 1 "3 4 3"
      , struct (sync) $
        n "<df ef f af fs!2 f!2>" #
        dek 5 "1 0.7" "<3 3 2 2 3!4>"
      , struct (sync) $
        rakk "{1 4/2 3/4}%6"
        ]
        ),
        ("c", stack [
        struct (sync') $
        n (arp "diverge down" "<bf'm11'8 df'sus2'8>") #
        dek 3 1 "3 4 3"
      , struct "t*2" $
        n "<bf'm11!4 df'maj9!4 af'six>" #
        dek 2 0.5 "<3!4 4!4 4>"
      , struct (sync') $
        n "<df!4 af bf!3>" #
        dek 5 1 2
      , struct (sync') $
        rakk "{1,4}"
        ]
        )
      ]
in
d2 $ ur 120 "a b a c c" pats [] # cps (160/240)

hush




let pats =
      [
      ("a", someCyclesBy 0.22 (const (stack [clip "{15 6,{10 11}%0.5}%12", rakk "{1 ~}%6?"])) $ stack [
        someCyclesBy 0.22 (mask (binaryN 16 "<0100110010 011100110 0110 110001110 01010100001>")) $
        struct "t(<5>,6,<0 3>)" $
        while "<f t>" (# sustain 0.125) $
        n (arp "<downup!3 pinkydown>" "<df'maj9'8!3 af'six'8>") #
        dek 3 "<1 0.5>" "<3 4 4 3>"
      , slow 2 $
        n "<[df@3 bf]!3 [fs@2 af ef]>" #
        dek 5 1 2
      , struct "t(5,6,<0 3>)?" $
        rakk "[1, 4]"
      , degrade $
        slow "{2 1 4 1}%3" $
        someCycles (chunk 3 (hurry 2)) $
        (|+ n "{7 0 7}%7") $
        struct "t(<5 6>,6,<0 3 1 2>)" $
        iter "{2 4 8}%<6 3>" $
        n (arp "{down converge up}%<5 4 6>" "{df'maj'8 df'five'4}%<6 3>") #
        dek "{2 3}%6" 1 3
      ]
      ),
      ("b", stack [
        degradeBy 0.33 $
        iter "{2 4}%6" $
        someCycles (struct "t*6") $
        n (arp "{converge down}%4" "<df'maj9'6 {df'maj'6 bf'9sus4'6}%2>") #
        dek 2 "{1 0.5}%6" "3 4"
      , repeatCycles 6 $
        struct "<t(2,6,<1 3>) t t(2,6)>" $
        n "<df bf>" #
        dek 5 1 2
      , struct "t(2,6,<0 2>)" $
        rakk "1"
      , struct "<t*6!3 t*12>" $
        rakk "4"
      ]
      )
      ]
in
d2 $ ur 32 "a b" pats [] # cps (160/240)

hush






x
