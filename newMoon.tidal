

 n 1, n 2, n 3, n 4, n 5, n 6, n 7


x





hush


do
    let rPat = (binaryN 16 "<81100 53355 10001>")
    d2 $ tilt $ stack [
        mute $ screw $ slow 8 $ slice 16 "[0 .. 15]" $ s "geto" # cat [n 7] # legato 1 # speed 0.75
      , someCyclesBy 0.22 (# octave 3) $ note "<e f e [b|c]>" # dek 5 1 # octave 2
      , someCycles (mask "t*8?") $ struct (rPat) $ note "<e'm9 [f'6by9|f'maj7] e'min7 b'min7>" # dek 2 1 # octave "4 3 5 4 3"
      , foldEvery [7,8] (rev . iter 4) $ someCyclesBy 0.55 (slow 2 . bite 4 "{~ <0*2 [1 3@3]> [~ 2@2, 1*2 ~]}%<2 1>") $ someCyclesBy 0.44 (fast "<1 2>" . linger (choose [0.25,0.5])) $ note (arp "<[converge down] [up updown]>" "<a'nineSus4'16 d'sus2'16>") # dek 3 1 # octave 2
      , slow 2 $ trap $ struct "t*16" $ s "linnhats" # gain 0.77
      , someCyclesBy 0.33 (slow "<1 2 3>" . stutWith 16 (1/24)(|* gain 0.92)) $ s "~ cp"
      , rakk "{1(<3 5>,8)?,2/2}"
      , mute $ someCyclesBy 0.22 (stutWith 2 (1/3)(id)) $ rakk "~ 3"
      , slow 3 $ note "{[~ c3*2] ~ cs3 ~ d3}%2" # dek 7 1
        ]


do
    let rPat = ("t(3,8,<0 3>)")
    d2 $ stack [
        mute $ screw $ slow 8 $ slice 16 "[0 .. 15]" $ s "geto" # cat [n 0, n 7] # legato 1 # speed 0.75
      , someCyclesBy 0.22 (# octave 3) $ note "<[~ e*4] f g*4 [~ b|c ~]>" # dek 5 1 # octave 2
      , mute $ someCyclesBy 0.44 (off 0.125 (struct ((inv)(rPat)))) $ struct (rPat) $ note "<[c'maj7'iii|g'6by9'iii]>" # dek 2 1 # octave "4 3 5 4 3 6"
      , someCyclesBy 0.66 (mask "<t*6? t*4 t@4>") $ whenmod 12 6 (# octave "2 4").(rev).(off 0.25 (slow "<4 2>" . chop 2)) $ note (arp "<[up|down] [up converge]>" "<d'sus2'10 c'sus2'4 g'6by9'12>") # dek 3 1 # octave 3
      , someCyclesBy 0.33 (0.25 <~) $ fast 1 $ struct (binaryN 16 91223) $ rakk "5 6"
      , struct (rPat) $ rakk "1"
      , foldEvery [3,4,5] (slow 2 . rev) $ someCyclesBy 0.33 (plyWith 8 (|* legato 0.5)) $ rakk "{3(1,8,3),~ [2 [~4]]}"
        ] # cps (138/240)



x
